import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useState } from 'react';



function Buttons({value, index, view, reset}) {
  return(
    <button onClick={view} id={`button${index}`}>{value}</button>
  )
}

function Display({display}) {
  return(
  <div>
    <p id='displayBox'>{display}</p>
  </div>
  )
}

function App({value, functions, view, display, reset}) {

  let createButtons = (i) => {
    return(
      <Buttons view={view} value={value[i] || i} index={i}/>
    )
  }

  let createFunctions = (i) => {
    return(
      <Buttons view={view} value={functions[i] || i} index={i} />
    )
  }

  let createDisplay = () => {
    return(
      <Display display={display} />
    )
  }

  return (
    <div className={styles.container}>
      <Head>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
  <div className="container">
    <section>
      {createDisplay()}
    </section>
    <section>
      {createFunctions('AC')}
      {createFunctions(1)}
      {createFunctions(2)}
    </section>
    <section>
      {createButtons(0)}
      {createButtons(1)}
      {createButtons(2)}
      {createFunctions(3)}
    </section>
    <section>
      {createButtons(3)}
      {createButtons(4)}
      {createButtons(5)}
      {createFunctions(4)}
    </section>
    <section className='buttonfix'>
      {createButtons(6)}
      {createButtons(7)}
      {createButtons(8)}
    </section>
    <section className='lastRow'>
      {createButtons(9)}
      {createFunctions(5)}
      {createFunctions(6)}
    </section>
</div>
      </main>
    </div>
  )
}

export default function Home() {
  const [state] = useState({
    value: [1, 2, 3, 4, 5, 6, 7, 8, 9, '0'],
    functions: ['AC', '/', 'x', '-', '+', '.', '=']
  })
  const [display, setDisplay] = useState({
    firstNumber: '',
    display: '0',
    operation: '',
  })

  let handleDisplay = (event) => {
    let text = event.target.innerText

    function divide(a, b) {
      return parseFloat(a) / parseFloat(b)
    }
    function multiply(a, b) {
      return parseFloat(a) * parseFloat(b)
    }
    function add(a, b) {
      return parseFloat(a) + parseFloat(b)
    }
    function subtract(a, b) {
      return parseFloat(a) - parseFloat(b)
    }

    switch (text) {
      case 'AC':
        setDisplay({
          display: '0',
        });
        break;
      case '/':
        setDisplay({
          ...display,
          firstNumber: display.display,
          display: '0',
          operation: '/',
        });
        break;
      case 'x':
        setDisplay({
          ...display,
          firstNumber: display.display,
          display: '0',
          operation: '*',
        });
        break;
      case '+':
        setDisplay({
          ...display,
          firstNumber: display.display,
          display: '0',
          operation: '+',
        });
        break;
      case '-':
        setDisplay({
          ...display,
          firstNumber: display.display,
          display: '0',
          operation: '-',
        });
        break;
      case '=':
        if(display.operation === '/'){
          setDisplay({
            ...display,
            display: divide(display.firstNumber, display.display),
          });
        }else if(display.operation === '*'){
          setDisplay({
            ...display,
            display: multiply(display.firstNumber, display.display),
          });
        }else if(display.operation === '+'){
          setDisplay({
            ...display,
            display: add(display.firstNumber, display.display),
          });
        }else if(display.operation === '-'){
          setDisplay({
            ...display,
            display: subtract(display.firstNumber, display.display),
          });
        }
        break;
      default:
        setDisplay({...display,
          display: display.display === '0' ? text : display.display + text,
        });
        break;
    }
    console.log(display.operation);
  };

  return (
    <App value={state.value} 
         functions={state.functions}
         view={handleDisplay}
         display={display.display}
         />
  )
}
